import { createClient } from "@supabase/supabase-js";
import { config } from "dotenv";

// Load environment variables
config({ path: ".env" });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error("Missing Supabase environment variables");
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false,
  },
});

const seedUsers = [
  {
    email: "accountant1@example.com",
    password: "password123",
    name: "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä –û–ª–µ–Ω–∞ –Ü–≤–∞–Ω—ñ–≤–Ω–∞",
  },
  {
    email: "accountant2@example.com",
    password: "password123",
    name: "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä –ú–∏—Ö–∞–π–ª–æ –ü–µ—Ç—Ä–æ–≤–∏—á",
  },
];

const seedData = {
  clients: [
    {
      name: "–Ü–≤–∞–Ω–µ–Ω–∫–æ –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á",
      tax_id: "1234567890",
      type: "–§–û–ü_1",
      tax_system: "—Å–ø—Ä–æ—â–µ–Ω–∞",
      contact_person: "–Ü–≤–∞–Ω–µ–Ω–∫–æ –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á",
      phone: "+380671234567",
      email: "ivan.ivanenko@gmail.com",
      address: "–º. –ö–∏—ó–≤, –≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1",
    },
    {
      name: "–ü–µ—Ç—Ä–µ–Ω–∫–æ –ü–µ—Ç—Ä–æ –ü–µ—Ç—Ä–æ–≤–∏—á",
      tax_id: "2345678901",
      type: "–§–û–ü_2",
      tax_system: "–∑–∞–≥–∞–ª—å–Ω–∞",
      contact_person: "–ü–µ—Ç—Ä–µ–Ω–∫–æ –ü–µ—Ç—Ä–æ –ü–µ—Ç—Ä–æ–≤–∏—á",
      phone: "+380672345678",
      email: "petro.petrenko@ukr.net",
      address: "–º. –õ—å–≤—ñ–≤, –≤—É–ª. –°–≤–æ–±–æ–¥–∏, 15",
    },
    {
      name: "–°–∏–¥–æ—Ä–µ–Ω–∫–æ –û–ª–µ–Ω–∞ –ú–∏–∫–æ–ª–∞—ó–≤–Ω–∞",
      tax_id: "3456789012",
      type: "–§–û–ü_3",
      tax_system: "—Å–ø—Ä–æ—â–µ–Ω–∞",
      contact_person: "–°–∏–¥–æ—Ä–µ–Ω–∫–æ –û–ª–µ–Ω–∞ –ú–∏–∫–æ–ª–∞—ó–≤–Ω–∞",
      phone: "+380673456789",
      email: "olena.sydorenko@gmail.com",
      address: "–º. –•–∞—Ä–∫—ñ–≤, –≤—É–ª. –°—É–º—Å—å–∫–∞, 32",
    },
    {
      name: '–¢–û–í "–£—Å–ø—ñ—à–Ω–∏–π –ë—ñ–∑–Ω–µ—Å"',
      tax_id: "12345678",
      type: "–¢–û–í",
      tax_system: "–∑–∞–≥–∞–ª—å–Ω–∞",
      contact_person: "–ö–æ–≤–∞–ª–µ–Ω–∫–æ –ê–Ω–¥—Ä—ñ–π –°–µ—Ä–≥—ñ–π–æ–≤–∏—á",
      phone: "+380674567890",
      email: "info@uspishny.com.ua",
      address: "–º. –î–Ω—ñ–ø—Ä–æ, –ø—Ä. –ì–∞–≥–∞—Ä—ñ–Ω–∞, 72",
    },
    {
      name: '–¢–û–í "–Ü–Ω–Ω–æ–≤–∞—Ü—ñ–π–Ω—ñ –†—ñ—à–µ–Ω–Ω—è"',
      tax_id: "23456789",
      type: "–¢–û–í",
      tax_system: "—Å–ø—Ä–æ—â–µ–Ω–∞",
      contact_person: "–ú–µ–ª—å–Ω–∏–∫ –û–ª—å–≥–∞ –í—ñ–∫—Ç–æ—Ä—ñ–≤–Ω–∞",
      phone: "+380675678901",
      email: "contact@innovations.ua",
      address: "–º. –û–¥–µ—Å–∞, –≤—É–ª. –î–µ—Ä–∏–±–∞—Å—ñ–≤—Å—å–∫–∞, 5",
    },
    {
      name: '–ü–ü "–¢–æ—Ä–≥–æ–≤–∏–π –î—ñ–º –£–∫—Ä–∞—ó–Ω–∞"',
      tax_id: "34567890",
      type: "–ü–ü",
      tax_system: "–∑–∞–≥–∞–ª—å–Ω–∞",
      contact_person: "–®–µ–≤—á–µ–Ω–∫–æ –ú–∏—Ö–∞–π–ª–æ –û–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á",
      phone: "+380676789012",
      email: "office@td-ukraine.com",
      address: "–º. –ó–∞–ø–æ—Ä—ñ–∂–∂—è, –≤—É–ª. –°–æ–±–æ—Ä–Ω–∞, 120",
    },
    {
      name: "–ö—Ä–∞–≤—á–µ–Ω–∫–æ –ú–∞—Ä—ñ—è –í–∞—Å–∏–ª—ñ–≤–Ω–∞",
      tax_id: "4567890123",
      type: "–§–û–ü_1",
      tax_system: "—Å–ø—Ä–æ—â–µ–Ω–∞",
      contact_person: "–ö—Ä–∞–≤—á–µ–Ω–∫–æ –ú–∞—Ä—ñ—è –í–∞—Å–∏–ª—ñ–≤–Ω–∞",
      phone: "+380677890123",
      email: "maria.kravchenko@outlook.com",
      address: "–º. –ü–æ–ª—Ç–∞–≤–∞, –≤—É–ª. –°–æ–±–æ—Ä–Ω–æ—Å—Ç—ñ, 24",
    },
    {
      name: "–ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ –û–ª–µ–∫—Å—ñ–π –ì—Ä–∏–≥–æ—Ä–æ–≤–∏—á",
      tax_id: "5678901234",
      type: "–§–û–ü_2",
      tax_system: "–∑–∞–≥–∞–ª—å–Ω–∞",
      contact_person: "–ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ –û–ª–µ–∫—Å—ñ–π –ì—Ä–∏–≥–æ—Ä–æ–≤–∏—á",
      phone: "+380678901234",
      email: "oleksiy.bondarenko@gmail.com",
      address: "–º. –ß–µ—Ä–∫–∞—Å–∏, –≤—É–ª. –®–µ–≤—á–µ–Ω–∫–∞, 67",
    },
  ],
};

async function getReportTemplates() {
  const { data, error } = await supabase.from("report_templates").select("*");

  if (error) throw error;
  return data;
}

async function generateClientReports(clientId: string, reportTemplates: any[]) {
  const reports = [];
  const currentDate = new Date();

  // Generate reports for the last 3 months
  for (let i = 0; i < 3; i++) {
    const reportDate = new Date(
      currentDate.getFullYear(),
      currentDate.getMonth() - i,
      1
    );

    for (const template of reportTemplates) {
      // Not all clients need all reports every month
      if (Math.random() > 0.3) continue;

      const dueDate = new Date(
        reportDate.getFullYear(),
        reportDate.getMonth() + 1,
        template.deadline_day
      );
      const statuses = ["–æ—á—ñ–∫—É—î—Ç—å—Å—è", "–≤_—Ä–æ–±–æ—Ç—ñ", "–ø–æ–¥–∞–Ω–æ"];
      const prices = {
        –Ñ–°–í: 500,
        –ü–î–§–û: 400,
        –ü–î–í: 800,
        "–§—ñ–Ω–∞–Ω—Å–æ–≤–∞ –∑–≤—ñ—Ç–Ω—ñ—Å—Ç—å": 1200,
        "–Ñ–¥–∏–Ω–∏–π –ø–æ–¥–∞—Ç–æ–∫": 600,
        "–†—ñ—á–Ω–∞ –¥–µ–∫–ª–∞—Ä–∞—Ü—ñ—è": 2000,
      };

      reports.push({
        client_id: clientId,
        report_template_id: template.id,
        due_date: dueDate.toISOString().split("T")[0],
        status:
          i === 0
            ? "–æ—á—ñ–∫—É—î—Ç—å—Å—è"
            : statuses[Math.floor(Math.random() * statuses.length)],
        price: prices[template.name as keyof typeof prices] || 500,
        notes:
          i === 0
            ? "–ü–æ—Ç–æ—á–Ω–∏–π –∑–≤—ñ—Ç"
            : `–ó–≤—ñ—Ç –∑–∞ ${reportDate.toLocaleDateString("uk-UA", {
                month: "long",
                year: "numeric",
              })}`,
      });
    }
  }

  return reports;
}

async function generatePayments(clientId: string) {
  const payments = [];
  const currentDate = new Date();

  // Generate payments for the last 6 months
  for (let i = 0; i < 6; i++) {
    const paymentDate = new Date(
      currentDate.getFullYear(),
      currentDate.getMonth() - i,
      1
    );
    const period = `${paymentDate.getFullYear()}-${String(
      paymentDate.getMonth() + 1
    ).padStart(2, "0")}`;

    // Some months might not have payments
    if (Math.random() > 0.8) continue;

    const amounts = [1000, 1500, 2000, 2500, 3000, 3500, 4000];
    const statuses = i < 2 ? ["–Ω–µ_—Å–ø–ª–∞—á–µ–Ω–æ", "—Å–ø–ª–∞—á–µ–Ω–æ"] : ["—Å–ø–ª–∞—á–µ–Ω–æ"];
    const status = statuses[Math.floor(Math.random() * statuses.length)];

    payments.push({
      client_id: clientId,
      period,
      amount: amounts[Math.floor(Math.random() * amounts.length)],
      status,
      paid_at:
        status === "—Å–ø–ª–∞—á–µ–Ω–æ"
          ? new Date(
              paymentDate.getTime() + Math.random() * 30 * 24 * 60 * 60 * 1000
            ).toISOString()
          : null,
    });
  }

  return payments;
}

async function createTestUsers() {
  console.log("üë§ Creating test users...");
  const createdUsers = [];

  for (const userData of seedUsers) {
    const { data, error } = await supabase.auth.admin.createUser({
      email: userData.email,
      password: userData.password,
      email_confirm: true,
      user_metadata: {
        name: userData.name,
      },
    });

    if (error) {
      console.error(`Error creating user ${userData.email}:`, error);
      continue;
    }

    if (data.user) {
      createdUsers.push({
        id: data.user.id,
        email: userData.email,
        name: userData.name,
      });
      console.log(`‚úÖ Created user: ${userData.name} (${userData.email})`);
    }
  }

  return createdUsers;
}

async function distributeClientsToUsers(clients: any[], users: any[]) {
  // Distribute clients evenly among users
  return clients.map((client, index) => ({
    ...client,
    user_id: users[index % users.length].id,
  }));
}

async function seed() {
  try {
    console.log("üå± Starting database seeding...");

    // Create test users first
    const testUsers = await createTestUsers();
    if (testUsers.length === 0) {
      console.error("‚ùå Failed to create any test users. Aborting seed.");
      return;
    }

    // Get existing report templates
    const reportTemplates = await getReportTemplates();
    console.log(`üìã Found ${reportTemplates.length} report templates`);

    // Insert clients with distributed user IDs
    console.log("üë• Inserting clients...");
    const clientsWithUserId = await distributeClientsToUsers(
      seedData.clients,
      testUsers
    );

    const { data: insertedClients, error: clientsError } = await supabase
      .from("clients")
      .insert(clientsWithUserId)
      .select();

    if (clientsError) {
      console.error("Error inserting clients:", clientsError);
      return;
    }

    console.log(`‚úÖ Inserted ${insertedClients.length} clients`);

    // Generate and insert client reports
    console.log("üìä Generating client reports...");
    const allReports = [];

    for (const client of insertedClients) {
      const clientReports = await generateClientReports(
        client.id,
        reportTemplates
      );
      allReports.push(...clientReports);
    }

    const { data: insertedReports, error: reportsError } = await supabase
      .from("client_reports")
      .insert(allReports)
      .select();

    if (reportsError) {
      console.error("Error inserting reports:", reportsError);
      return;
    }

    console.log(`‚úÖ Inserted ${insertedReports.length} client reports`);

    // Generate and insert payments
    console.log("üí∞ Generating payments...");
    const allPayments = [];

    for (const client of insertedClients) {
      const clientPayments = await generatePayments(client.id);
      allPayments.push(...clientPayments);
    }

    const { data: insertedPayments, error: paymentsError } = await supabase
      .from("payments")
      .insert(allPayments)
      .select();

    if (paymentsError) {
      console.error("Error inserting payments:", paymentsError);
      return;
    }

    console.log(`‚úÖ Inserted ${insertedPayments.length} payments`);

    console.log("üéâ Database seeding completed successfully!");
    console.log(`
üìä Summary:
- ${testUsers.length} test users created
- ${insertedClients.length} clients
- ${insertedReports.length} reports  
- ${insertedPayments.length} payments
- 6 report templates (already existed)

üë• Test Users Created:
${testUsers
  .map((user) => `- ${user.name} (${user.email}) - password: password123`)
  .join("\n")}

üîë You can now login with any of the test accounts!
    `);
  } catch (error) {
    console.error("‚ùå Seeding failed:", error);
  }
}

seed();
